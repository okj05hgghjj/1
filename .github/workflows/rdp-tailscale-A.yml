name: "RDP via Tailscale + RustDesk (Workflow A)"

on:
  workflow_dispatch:
    inputs:
      ts_tailnet:        { description: "Tailscale tailnet (e.g. you@gmail.com)", required: true }
      ts_api_key:        { description: "Tailscale API key (device admin, no 'Bearer')", required: true }
      ts_authkey:        { description: "Tailscale Auth key (reusable or ephemeral)", required: true }
      quick_test:
        description: "Run 5-minute quick test"
        type: boolean
        default: false
      runtime_minutes:   { description: "Runtime (max 360; default 355 if not test)", required: false, default: "355" }
      do_purge:          { description: "Purge bullet* at start", required: false, default: "true" }
      cycles:            { description: "0=infinite; N=handoffs left incl. this run", required: false, default: "0" }
      rdp_count:
        description: "How many RDP instances? 1=normal, 2–10=multi"
        required: false
        default: "1"

permissions:
  contents: read
  actions: write

defaults:
  run:
    shell: pwsh

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.eval.outputs.matrix }}
    steps:
      - id: eval
        run: |
          $count = [int]"${{ inputs.rdp_count }}"
          if ($count -lt 1) { $count = 1 }
          if ($count -gt 10) { $count = 10 }
          $inc=@(); for ($i=1; $i -le $count; $i++){ $inc+=@{id=$i} }
          $json=@{include=$inc}|ConvertTo-Json -Compress
          "matrix=$json" | Out-File $env:GITHUB_OUTPUT -Append

  rdp:
    needs: setup
    runs-on: windows-2025
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
      max-parallel: 10
    timeout-minutes: 370
    env:
      RDP_USER: Bullettemporary
      RDP_PASS: Bullet@12345

    steps:
      - name: Decide hostname
        run: |
          if ([int]"${{ inputs.rdp_count }}" -gt 1) { $env:TS_HOSTNAME = "bullet${{ matrix.id }}" } else { $env:TS_HOSTNAME = "bullet" }
          "TS_HOSTNAME=$env:TS_HOSTNAME" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Setup Tailscale + RDP
        run: |
          $ErrorActionPreference="Stop"
          function Yes($v){ "$v" -match '^(?i:true|1|yes|on)$' }
          function IntOr($v,$d){ if("$v" -match '^\d+$'){ [int]$v } else { [int]$d } }

          # --- runtime ---
          $runtime = IntOr("${{ inputs.runtime_minutes }}", 355)
          if (Yes("${{ inputs.quick_test }}")) { $runtime = 5 }
          if (-not (Yes("${{ inputs.quick_test }}")) -and $runtime -lt 6) { $runtime = 355 }
          if ($runtime -gt 360) { $runtime = 355 }
          "RUNTIME_MINUTES=$runtime" | Out-File -Append $env:GITHUB_ENV

          # --- purge bullet* devices (optional) ---
          if (Yes("${{ inputs.do_purge }}")) {
            try{
              $auth=[Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("${{ inputs.ts_api_key }}:"))
              $tn=[uri]::EscapeDataString("${{ inputs.ts_tailnet }}")
              $resp=Invoke-RestMethod "https://api.tailscale.com/api/v2/tailnet/$tn/devices" -Headers @{Authorization="Basic $auth"}
              foreach($d in $resp.devices){
                if($d.hostname -match '^bullet[0-9]*$'){
                  Invoke-RestMethod -Method Delete -Uri "https://api.tailscale.com/api/v2/device/$($d.id)" -Headers @{Authorization="Basic $auth"} -ErrorAction SilentlyContinue
                }
              }
              Write-Host "Purged existing bullet* devices (if any)."
            } catch { Write-Host "Purge warning: $($_.Exception.Message)" }
          }

          # --- install & login tailscale ---
          $ts="C:\Program Files\Tailscale\tailscale.exe"
          if(-not(Test-Path $ts)){
            $url="https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe"
            $dst="$env:TEMP\ts-setup.exe"
            Invoke-WebRequest $url -OutFile $dst -UseBasicParsing
            Start-Process $dst -ArgumentList "/quiet" -Wait
          }
          Start-Service Tailscale -ErrorAction SilentlyContinue
          & $ts logout | Out-Null
          & $ts up --authkey "${{ inputs.ts_authkey }}" --hostname "$env:TS_HOSTNAME" --accept-routes --accept-dns=false
          $ip=& $ts ip -4 | Select-Object -First 1

          # --- enable rdp & user ---
          $u=$env:RDP_USER; $p=$env:RDP_PASS
          $sec=ConvertTo-SecureString $p -AsPlainText -Force
          if(-not(Get-LocalUser -Name $u -EA SilentlyContinue)){
            New-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Add-LocalGroupMember Administrators $u
            Add-LocalGroupMember "Remote Desktop Users" $u
          } else {
            Set-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Enable-LocalUser -Name $u
          }
          Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" fDenyTSConnections 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null

          Write-Host "RDP ready → user=$u pass=$p ip=$ip dns=$env:TS_HOSTNAME"

      - name: Install RustDesk (winget + fallback)
        run: |
          $ErrorActionPreference="Continue"
          function Try-Winget($id){
            try{
              winget install --id $id -e --silent --accept-package-agreements --accept-source-agreements --disable-interactivity
              return $LASTEXITCODE -eq 0
            }catch{ return $false }
          }

          $ok = Try-Winget "RustDesk.RustDesk"
          if(-not $ok){
            Write-Host "Winget install failed; trying direct download fallback..."
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            $url = "https://github.com/rustdesk/rustdesk/releases/download/1.2.3/rustdesk-1.2.3-x86_64.exe"
            $exe = "$env:TEMP\rustdesk.exe"
            try {
              Invoke-WebRequest -Uri $url -OutFile $exe -UseBasicParsing
              Start-Process $exe -ArgumentList "/verysilent /norestart" -Wait
              $ok = $true
            } catch {
              Write-Host "RustDesk direct download failed: $($_.Exception.Message)"
            }
          }

          if($ok){ Write-Host "RustDesk installed." } else { Write-Host "RustDesk install may have failed (continuing)"; exit 0 }

      - name: Launch RustDesk
        run: |
          $rd = (Get-ChildItem "C:\Program Files" -Recurse -Filter "rustdesk.exe" -ErrorAction SilentlyContinue | Select-Object -First 1)
          if(-not $rd){ $rd = (Get-ChildItem "C:\Program Files (x86)" -Recurse -Filter "rustdesk.exe" -ErrorAction SilentlyContinue | Select-Object -First 1) }
          if($rd){ Start-Process $rd.FullName; Start-Sleep -Seconds 10; Write-Host "RustDesk launched: $($rd.FullName)" } else { Write-Host "RustDesk not found to launch." }

      - name: Take full-screen screenshot (RustDesk visible)
        run: |
          Add-Type -AssemblyName System.Windows.Forms
          Add-Type -AssemblyName System.Drawing
          $bounds = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds
          $bmp = New-Object System.Drawing.Bitmap $bounds.Width, $bounds.Height
          $gfx = [System.Drawing.Graphics]::FromImage($bmp)
          $gfx.CopyFromScreen($bounds.Location, [System.Drawing.Point]::Empty, $bounds.Size)
          $file = "$env:RUNNER_TEMP\rustdesk-login-${{ env.TS_HOSTNAME }}.png"
          $bmp.Save($file, [System.Drawing.Imaging.ImageFormat]::Png)
          $gfx.Dispose(); $bmp.Dispose()
          $size = (Get-Item $file).Length
          Write-Host "Saved screenshot: $file (`"$([math]::Round($size/1MB,2)) MB`")"

      - name: Upload screenshot artifact
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-login-${{ env.TS_HOSTNAME }}
          path: ${{ runner.temp }}/rustdesk-login-${{ env.TS_HOSTNAME }}.png
          if-no-files-found: error
          compression-level: 0

      - name: Keep alive
        run: |
          $mins = [int]"${{ inputs.runtime_minutes }}"
          if ("${{ inputs.quick_test }}" -match '^(?i:true|1|yes|on)$') { $mins = 5 } elseif ($mins -lt 6 -or $mins -gt 360) { $mins = 355 }
          $end=(Get-Date).AddMinutes($mins)
          while((Get-Date) -lt $end){ Start-Sleep -Seconds 60 }

      - name: Dispatch next or stop
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          $cycles = [int]"${{ inputs.cycles }}"
          if ($cycles -gt 0) {
            $next = $cycles - 1
            if ($next -le 0) {
              $url = "https://api.github.com/repos/${{ github.repository }}/actions/workflows/rdp-tailscale-stop.yml/dispatches"
              $hdr = @{ Authorization = "Bearer $env:GH_TOKEN"; Accept = "application/vnd.github+json" }
              $payload = @{ ts_tailnet = "${{ inputs.ts_tailnet }}"; ts_api_key = "${{ inputs.ts_api_key }}"; base_prefix = "bullet"; max_count = "10"; dry_run = "false" }
              $body = @{ ref = "${{ github.ref_name }}"; inputs = $payload } | ConvertTo-Json -Depth 20
              Invoke-WebRequest -Method POST -Uri $url -Headers $hdr -Body $body | Out-Null
            } else {
              $payload = @{
                ts_tailnet     = "${{ inputs.ts_tailnet }}"
                ts_api_key     = "${{ inputs.ts_api_key }}"
                ts_authkey     = "${{ inputs.ts_authkey }}"
                quick_test     = "${{ inputs.quick_test }}"
                runtime_minutes= "${{ inputs.runtime_minutes }}"
                do_purge       = "${{ inputs.do_purge }}"
                cycles         = "$next"
                rdp_count      = "${{ inputs.rdp_count }}"
              }
              $url2 = "https://api.github.com/repos/${{ github.repository }}/actions/workflows/rdp-tailscale-B.yml/dispatches"
              $hdr2 = @{ Authorization = "Bearer $env:GH_TOKEN"; Accept = "application/vnd.github+json" }
              $body2 = @{ ref = "${{ github.ref_name }}"; inputs = $payload } | ConvertTo-Json -Depth 20
              Invoke-WebRequest -Method POST -Uri $url2 -Headers $hdr2 -Body $body2 | Out-Null
            }
          } else {
            Write-Host "No cycles configured. Done."
          }
