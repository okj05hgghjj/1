name: "RDP via Tailscale + RustDesk + Avica + Browsers (Workflow A)"

on:
  workflow_dispatch:
    inputs:
      ts_tailnet:        { description: "Tailscale tailnet (e.g. you@gmail.com)", required: true }
      ts_api_key:        { description: "Tailscale API key (device admin)", required: true }
      ts_authkey:        { description: "Tailscale Auth key (reusable or ephemeral)", required: true }
      quick_test:
        description: "Run 5-minute quick test"
        type: boolean
        default: false
      runtime_minutes:   { description: "Runtime (max 360; default 355)", required: false, default: "355" }
      do_purge:          { description: "Purge bullet* at start", required: false, default: "true" }
      cycles:            { description: "0=infinite; N=handoffs left incl. this run", required: false, default: "0" }
      stop_dryrun_first:
        description: "At cycles end: dry-run Stop before real purge"
        required: false
        default: true
        type: boolean
      multi_rdp:
        description: "Enable multiple RDP instances?"
        required: false
        default: false
        type: boolean
      multi_count:
        description: "How many RDP instances? (1â€“10)"
        required: false
        default: "2"

permissions:
  contents: read
  actions: write

defaults:
  run:
    shell: pwsh

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      multi:  ${{ steps.eval.outputs.multi }}
      count:  ${{ steps.eval.outputs.count }}
      matrix: ${{ steps.eval.outputs.matrix }}
    steps:
      - id: eval
        run: |
          $multi = "${{ inputs.multi_rdp }}"
          $count = [int]"${{ inputs.multi_count }}"
          if ($count -gt 10) { $count = 10 }
          if ($count -lt 1)  { $count = 1 }
          if ($multi -eq "true") {
            "multi=true" | Out-File $env:GITHUB_OUTPUT -Append
            "count=$count" | Out-File $env:GITHUB_OUTPUT -Append
          } else {
            "multi=false" | Out-File $env:GITHUB_OUTPUT -Append
            "count=1"     | Out-File $env:GITHUB_OUTPUT -Append
          }
          $inc=@(); for ($i=1; $i -le $count; $i++){ $inc+=@{id=$i} }
          $json=@{include=$inc}|ConvertTo-Json -Compress
          "matrix=$json" | Out-File $env:GITHUB_OUTPUT -Append

  rdp:
    needs: setup
    runs-on: windows-2025
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
      max-parallel: 10
    timeout-minutes: 370
    env:
      RDP_USER: Bullettemporary
      RDP_PASS: Bullet@12345

    steps:
      - name: Hostname
        run: |
          if ("${{ needs.setup.outputs.multi }}" -eq "true") {
            $env:TS_HOSTNAME="bullet${{ matrix.id }}"
          } else {
            $env:TS_HOSTNAME="bullet"
          }
          "TS_HOSTNAME=$env:TS_HOSTNAME" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Setup Tailscale + RDP
        run: |
          $ErrorActionPreference="Stop"
          function Yes($v){ "$v" -match '^(?i:true|1|yes)$' }
          $runtime=[int]"${{ inputs.runtime_minutes }}"
          if (Yes("${{ inputs.quick_test }}")){ $runtime=5 }
          if ($runtime -gt 360){ $runtime=355 }
          "RUNTIME_MINUTES=$runtime" | Out-File -Append $env:GITHUB_ENV

          if (Yes("${{ inputs.do_purge }}")) {
            try {
              $auth=[Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("${{ inputs.ts_api_key }}:"))
              $tn=[uri]::EscapeDataString("${{ inputs.ts_tailnet }}")
              $resp=Invoke-RestMethod "https://api.tailscale.com/api/v2/tailnet/$tn/devices" -Headers @{Authorization="Basic $auth"}
              foreach($d in $resp.devices){ if($d.hostname -match '^bullet'){ Invoke-RestMethod -Method Delete -Uri "https://api.tailscale.com/api/v2/device/$($d.id)" -Headers @{Authorization="Basic $auth"}}}
            }catch{Write-Host "purge failed"}
          }

          $exe="C:\Program Files\Tailscale\tailscale.exe"
          if(-not(Test-Path $exe)){
            $url="https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe"
            $dst="$env:TEMP\ts.exe"
            Invoke-WebRequest $url -OutFile $dst -UseBasicParsing
            Start-Process $dst -ArgumentList "/quiet" -Wait
          }
          Start-Service Tailscale
          & $exe logout | Out-Null
          & $exe up --authkey "${{ inputs.ts_authkey }}" --hostname "$env:TS_HOSTNAME" --accept-routes --accept-dns=false
          $ip=& $exe ip -4|select -first 1
          Write-Host "RDP ready user=$env:RDP_USER pass=$env:RDP_PASS ip=$ip"

          $sec=ConvertTo-SecureString $env:RDP_PASS -AsPlainText -Force
          if(-not(Get-LocalUser $env:RDP_USER -EA SilentlyContinue)){
            New-LocalUser $env:RDP_USER -Password $sec -AccountNeverExpires
            Add-LocalGroupMember Administrators $env:RDP_USER
            Add-LocalGroupMember "Remote Desktop Users" $env:RDP_USER
          } else {Set-LocalUser $env:RDP_USER -Password $sec -AccountNeverExpires}
          Enable-LocalUser $env:RDP_USER
          Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" fDenyTSConnections 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

      - name: Install RustDesk
        continue-on-error: true
        run: |
          $url="https://github.com/rustdesk/rustdesk/releases/download/1.2.3/rustdesk-1.2.3-x86_64.exe"
          $exe="$env:TEMP\rustdesk.exe"
          try { Invoke-WebRequest $url -OutFile $exe -UseBasicParsing; Start-Process $exe -Args "/verysilent /norestart" -Wait; Write-Host "RustDesk installed" } catch { Write-Host "RustDesk install failed" }

      - name: Install Avica
        continue-on-error: true
        run: |
          $url="https://www.avica.com/downloads/Avica-Setup-latest.exe"
          $dst="$env:TEMP\avica.exe"
          try { Invoke-WebRequest $url -OutFile $dst -UseBasicParsing; Start-Process $dst -Args "/quiet" -Wait; Write-Host "Avica installed" } catch { Write-Host "Avica install failed" }

      - name: Install Brave Browser
        continue-on-error: true
        run: |
          $url="https://github.com/brave/brave-browser/releases/latest/download/BraveBrowserStandaloneSilentSetup.exe"
          $dst="$env:TEMP\brave.exe"
          try { Invoke-WebRequest $url -OutFile $dst -UseBasicParsing; Start-Process $dst -Args "/silent /install" -Wait; Write-Host "Brave installed" } catch { Write-Host "Brave install failed" }

      - name: Install Vivaldi Browser
        continue-on-error: true
        run: |
          $url="https://downloads.vivaldi.com/stable/Vivaldi.6.7.3329.29.x64.exe"
          $dst="$env:TEMP\vivaldi.exe"
          try { Invoke-WebRequest $url -OutFile $dst -UseBasicParsing; Start-Process $dst -Args "/silent /install" -Wait; Write-Host "Vivaldi installed" } catch { Write-Host "Vivaldi install failed" }

      - name: Install Firefox Nightly
        continue-on-error: true
        run: |
          $url="https://archive.mozilla.org/pub/firefox/nightly/latest-mozilla-central/firefox-setup-nightly-latest.exe"
          $dst="$env:TEMP\firefox-nightly.exe"
          try { Invoke-WebRequest $url -OutFile $dst -UseBasicParsing; Start-Process $dst -Args "/S" -Wait; Write-Host "Firefox Nightly installed" } catch { Write-Host "Firefox Nightly install failed" }

      - name: Keep Alive
        run: |
          $end=(Get-Date).AddMinutes([int]$env:RUNTIME_MINUTES)
          while((Get-Date)-lt $end){Start-Sleep 60}

      - name: Dispatch next or Stop
        if: always()
        run: |
          Write-Host "dispatch step placeholder"
