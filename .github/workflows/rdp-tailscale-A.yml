name: "RDP via Tailscale + RustDesk (Workflow A)"

on:
  workflow_dispatch:
    inputs:
      ts_tailnet:        { description: "Tailscale tailnet (e.g. you@gmail.com)", required: true }
      ts_api_key:        { description: "Tailscale API key (device admin, no 'Bearer')", required: true }
      ts_authkey:        { description: "Tailscale Auth key (reusable or ephemeral)", required: true }
      quick_test:
        description: "Run 5-minute quick test"
        type: boolean
        default: false
      runtime_minutes:   { description: "Runtime (max 360; default 355; ignored if quick_test=true)", required: false, default: "355" }
      do_purge:          { description: "Purge bullet* at start", required: false, default: "true" }
      multi_rdp:
        description: "Enable multiple RDPs"
        required: false
        default: false
        type: boolean
      multi_count:
        description: "Number of RDPs (1–10)"
        required: false
        default: "1"

permissions:
  contents: read
  actions: write

defaults:
  run:
    shell: pwsh

jobs:
  rdp:
    runs-on: windows-2025
    timeout-minutes: 370

    steps:
      - name: Decide hostname
        run: |
          if ("${{ inputs.multi_rdp }}" -eq "true") { $env:TS_HOSTNAME = "bullet1" } else { $env:TS_HOSTNAME = "bullet" }
          "TS_HOSTNAME=$env:TS_HOSTNAME" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Setup Tailscale + RDP
        run: |
          $ErrorActionPreference = "Stop"
          function Yes($v){ "$v" -match '^(?i:true|1|yes|on)$' }

          # Runtime selection
          $runtime = [int]"${{ inputs.runtime_minutes }}"
          if (Yes("${{ inputs.quick_test }}")) { $runtime = 5 }
          if ($runtime -gt 360) { $runtime = 355 }
          if ($runtime -lt 6 -and -not (Yes("${{ inputs.quick_test }}"))) { $runtime = 355 }
          "RUNTIME_MINUTES=$runtime" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Runtime: $runtime minutes"

          # Optional purge of bullet*
          if (Yes("${{ inputs.do_purge }}")) {
            try {
              $auth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("${{ inputs.ts_api_key }}:"))
              $tn   = [System.Uri]::EscapeDataString("${{ inputs.ts_tailnet }}")
              $resp = Invoke-RestMethod -Uri "https://api.tailscale.com/api/v2/tailnet/$tn/devices" -Headers @{ Authorization = "Basic $auth" }
              foreach ($d in $resp.devices) {
                if ($d.hostname -match '^bullet[0-9]*$') {
                  Invoke-RestMethod -Method Delete -Uri "https://api.tailscale.com/api/v2/device/$($d.id)" -Headers @{ Authorization = "Basic $auth" } -ErrorAction SilentlyContinue
                }
              }
              Write-Host "Purged existing bullet* devices (if any)."
            } catch { Write-Host "Purge warning: $($_.Exception.Message)" }
          }

          # Tailscale
          $tsExe = "C:\Program Files\Tailscale\tailscale.exe"
          if (-not (Test-Path $tsExe)) {
            $url = "https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe"
            $dst = "$env:TEMP\ts.exe"
            Invoke-WebRequest -Uri $url -OutFile $dst -UseBasicParsing
            Start-Process -FilePath $dst -ArgumentList "/quiet" -Wait
          }
          Start-Service Tailscale -ErrorAction SilentlyContinue
          & $tsExe logout | Out-Null
          & $tsExe up --authkey "${{ inputs.ts_authkey }}" --hostname $env:TS_HOSTNAME --accept-routes --accept-dns=false

          # Enable RDP account
          $user="Bullettemporary"; $pass="Bullet@12345"
          $sec = ConvertTo-SecureString $pass -AsPlainText -Force
          if (-not (Get-LocalUser -Name $user -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $user -Password $sec -AccountNeverExpires
            Add-LocalGroupMember -Group Administrators -Member $user
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $user
          } else {
            Set-LocalUser -Name $user -Password $sec -AccountNeverExpires
            Enable-LocalUser -Name $user
          }
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null
          Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name fDenyTSConnections -Value 0

          $ip4 = (& $tsExe ip -4 | Select-Object -First 1)
          Write-Host "RDP login → user=$user pass=$pass ip=$ip4"

      - name: Install RustDesk (robust) + Get ID
        run: |
          $ErrorActionPreference = "Stop"
          # Helpers
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          $Headers = @{ "User-Agent" = "curl/8.4"; "Accept" = "*/*" }

          function Test-MsiFile($path){
            if (-not (Test-Path $path)) { return $false }
            $fi = Get-Item $path
            if ($fi.Length -lt 5MB) { return $false }               # too small → likely HTML
            $fs = [System.IO.File]::OpenRead($path)
            try {
              $buf = New-Object byte[] 8
              $null = $fs.Read($buf,0,8)
              # MSI (OLE Compound) magic bytes: D0 CF 11 E0 A1 B1 1A E1
              $hex = ($buf | ForEach-Object { $_.ToString("X2") }) -join " "
              return ($hex -eq "D0 CF 11 E0 A1 B1 1A E1")
            } finally { $fs.Dispose() }
          }

          # 1) Try winget first
          $rustExe = $null
          try {
            $winget = "$env:LOCALAPPDATA\Microsoft\WindowsApps\winget.exe"; if (-not (Test-Path $winget)) { $winget = "winget" }
            & $winget install --id RustDesk.RustDesk -e --silent --accept-package-agreements --accept-source-agreements
          } catch {}

          if (Test-Path "C:\Program Files\RustDesk\rustdesk.exe") { $rustExe = "C:\Program Files\RustDesk\rustdesk.exe" }
          elseif (Test-Path "C:\Program Files (x86)\RustDesk\rustdesk.exe") { $rustExe = "C:\Program Files (x86)\RustDesk\rustdesk.exe" }

          # 2) If winget failed, fetch MSI from GitHub (pinned version) with headers + verify
          if (-not $rustExe) {
            $msi = "$env:TEMP\rustdesk.msi"
            $ghUrl = "https://github.com/rustdesk/rustdesk/releases/download/1.2.3/rustdesk-1.2.3-x86_64.msi"
            try {
              Invoke-WebRequest -Uri $ghUrl -Headers $Headers -MaximumRedirection 10 -OutFile $msi -UseBasicParsing
            } catch { Write-Host "GitHub MSI download error: $($_.Exception.Message)" }
            if (-not (Test-MsiFile $msi)) {
              # 3) Fallback mirror (SourceForge) with headers + verify
              $sfUrl = "https://sourceforge.net/projects/rustdesk/files/windows/rustdesk-1.2.3-x86_64.msi/download"
              try {
                Invoke-WebRequest -Uri $sfUrl -Headers $Headers -MaximumRedirection 10 -OutFile $msi -UseBasicParsing
              } catch { Write-Host "SourceForge MSI download error: $($_.Exception.Message)" }
            }
            if (-not (Test-MsiFile $msi)) { throw "Could not obtain a valid RustDesk MSI (avoided HTML download)." }
            Start-Process msiexec.exe -ArgumentList "/i `"$msi`" /qn" -Wait
            if (Test-Path "C:\Program Files\RustDesk\rustdesk.exe") { $rustExe = "C:\Program Files\RustDesk\rustdesk.exe" }
            elseif (Test-Path "C:\Program Files (x86)\RustDesk\rustdesk.exe") { $rustExe = "C:\Program Files (x86)\RustDesk\rustdesk.exe" }
            else { throw "RustDesk not found after MSI install." }
          }

          # Launch + password + ID
          $pwd = (New-Guid).Guid.Substring(0,8)
          Start-Process -FilePath $rustExe
          Start-Sleep -Seconds 12
          try { & $rustExe --password $pwd } catch {}

          $id = ""
          for ($i=0; $i -lt 30 -and -not $id; $i++) {
            try { $out = & $rustExe --get-id 2>$null; if ($out) { $id = $out.Trim() } } catch {}
            if (-not $id -and (Test-Path "C:\ProgramData\RustDesk\id")) {
              $maybe = Get-Content "C:\ProgramData\RustDesk\id" -ErrorAction SilentlyContinue | Select-Object -First 1
              if ($maybe -match '^[0-9A-Za-z]{5,}$') { $id = $maybe.Trim() }
            }
            if (-not $id) { Start-Sleep -Seconds 3 }
          }
          if (-not $id) { $id = "unknown" }

          "RUSTDESK_ID=$id"   | Out-File -FilePath $env:GITHUB_ENV -Append
          "RUSTDESK_PWD=$pwd" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Show RustDesk ID + Password in logs
        run: |
          Write-Host "RustDesk ID = $env:RUSTDESK_ID"
          Write-Host "RustDesk PASSWORD = $env:RUSTDESK_PWD"

      - name: Screenshot & Upload to GoFile
        run: |
          Add-Type -AssemblyName System.Windows.Forms
          Add-Type -AssemblyName System.Drawing
          $bounds = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds
          $bmp = New-Object System.Drawing.Bitmap $bounds.Width, $bounds.Height
          $gfx = [System.Drawing.Graphics]::FromImage($bmp)
          $gfx.CopyFromScreen($bounds.Location, [System.Drawing.Point]::Empty, $bounds.Size)
          $file = "$env:GITHUB_WORKSPACE\rustdesk-login.png"
          $bmp.Save($file, [System.Drawing.Imaging.ImageFormat]::Png)

          $server = (Invoke-RestMethod https://api.gofile.io/getServer).data.server
          $resp = Invoke-RestMethod -Uri "https://$server.gofile.io/contents/uploadfile" -Method Post -Form @{ "file" = Get-Item $file }
          $link = $resp.data.directLink
          if (-not $link) { $link = $resp.data.downloadPage }
          Write-Host "RustDesk Screenshot GoFile Link: $link"

      - name: Keep alive
        run: |
          $end=(Get-Date).AddMinutes([int]$env:RUNTIME_MINUTES)
          while((Get-Date) -lt $end){ Start-Sleep -Seconds 60 }
