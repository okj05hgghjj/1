name: "RDP via Tailscale + Instant Tools ZIP (Workflow A)"

on:
  workflow_dispatch:
    inputs:
      ts_tailnet:        { description: "Tailscale tailnet (e.g. you@gmail.com)", required: true }
      ts_api_key:        { description: "Tailscale API key (device admin, no 'Bearer')", required: true }
      ts_authkey:        { description: "Tailscale Auth key (reusable or ephemeral)", required: true }
      tools_zip_url:
        description: "GoFile /d/<id> page OR direct .zip link"
        required: false
        default: ""
      quick_test:
        description: "Run 5-minute quick test"
        type: boolean
        default: false
      runtime_minutes:   { description: "Runtime (max 360; default 355 if not test)", required: false, default: "355" }
      do_purge:          { description: "Purge bullet* at start", required: false, default: "true" }
      cycles:            { description: "0=infinite; N=handoffs left incl. this run", required: false, default: "0" }
      rdp_count:
        description: "How many RDP instances? 1=normal, 2–10=multi"
        required: false
        default: "1"
      install_heavy_browsers:
        description: "Silently install Brave/Vivaldi/Avica (from ZIP) in background"
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  actions: write

defaults:
  run:
    shell: pwsh

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.eval.outputs.matrix }}
    steps:
      - id: eval
        run: |
          $count = [int]"${{ inputs.rdp_count }}"
          if ($count -lt 1) { $count = 1 }
          if ($count -gt 10) { $count = 10 }
          $inc=@(); for ($i=1; $i -le $count; $i++){ $inc+=@{id=$i} }
          $json=@{include=$inc}|ConvertTo-Json -Compress
          "matrix=$json" | Out-File $env:GITHUB_OUTPUT -Append

  rdp:
    needs: setup
    runs-on: windows-2025
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
      max-parallel: 10
    timeout-minutes: 370
    env:
      RDP_USER: Bullettemporary
      RDP_PASS: Bullet@12345

    steps:
      - name: Decide hostname
        run: |
          if ([int]"${{ inputs.rdp_count }}" -gt 1) { $env:TS_HOSTNAME = "bullet${{ matrix.id }}" } else { $env:TS_HOSTNAME = "bullet" }
          "TS_HOSTNAME=$env:TS_HOSTNAME" | Out-File -FilePath $env:GITHUB_ENV -Append

      # >>> OPTION B: Accept GoFile /d/<id> page OR direct .zip and auto-resolve
      - name: Download & extract tools ZIP (GoFile page OR direct)
        run: |
          $url = "${{ inputs.tools_zip_url }}".Trim()
          if ([string]::IsNullOrWhiteSpace($url)) {
            Write-Host "tools_zip_url not provided; skipping tools bundle."
            exit 0
          }

          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          $tmp  = "$env:RUNNER_TEMP\tools.zip"
          $out  = "C:\Tools"
          New-Item -Force -ItemType Directory $out | Out-Null

          function Download-Zip([string]$u){
            try {
              Invoke-WebRequest -Uri $u -OutFile $tmp -UseBasicParsing -MaximumRedirection 10 -Headers @{ "User-Agent"="curl/8.4" }
              return $true
            } catch {
              Write-Host "Download failed: $($_.Exception.Message)"; return $false
            }
          }

          $ok = $false
          if ($url -match '\.zip(\?|$)') {
            $ok = Download-Zip $url
          } elseif ($url -match 'https?://(www\.)?gofile\.io/d/([A-Za-z0-9]+)') {
            $id = $Matches[2]
            try {
              # Public API resolve (folder must be public)
              $api = "https://api.gofile.io/getContent?contentId=$id&websiteToken=12345"
              $j = Invoke-RestMethod -Uri $api -UseBasicParsing -Headers @{ "User-Agent"="curl/8.4" }
              if ($j.status -eq "ok") {
                $file = $j.data.children | Where-Object { $_.type -eq "file" -and $_.name -match '\.zip$' } | Select-Object -First 1
                if ($file -and $file.directLink) {
                  Write-Host "Resolved direct link: $($file.directLink)"
                  $ok = Download-Zip $file.directLink
                } else {
                  throw "No .zip file found in GoFile folder $id."
                }
              } else {
                throw "GoFile API status: $($j.status)"
              }
            } catch {
              throw "GoFile resolve failed for $url — $($_.Exception.Message)"
            }
          } else {
            throw "tools_zip_url must be a direct .zip link or a GoFile /d/<id> page; got: $url"
          }

          if (-not $ok -or -not (Test-Path $tmp) -or (Get-Item $tmp).Length -lt 1048576) {
            throw "Downloaded file missing/too small — ensure link is valid."
          }

          Expand-Archive -Path $tmp -DestinationPath $out -Force
          Write-Host "Tools unpacked to $out"

          # Shortcuts (if found)
          $desktop = "C:\Users\Public\Desktop"
          $wsh = New-Object -ComObject WScript.Shell
          $rust = Get-ChildItem -Path $out -Recurse -Filter "rustdesk*.exe" | Sort-Object Length -Descending | Select-Object -First 1
          if ($rust) { $lnk = $wsh.CreateShortcut((Join-Path $desktop "RustDesk (portable).lnk")); $lnk.TargetPath = $rust.FullName; $lnk.Save() }
          $ff = Get-ChildItem -Path $out -Recurse -Filter "firefox.exe" | Where-Object { $_.FullName -match 'FirefoxNightly' } | Select-Object -First 1
          if ($ff) { $lnk2 = $wsh.CreateShortcut((Join-Path $desktop "Firefox Nightly (portable).lnk")); $lnk2.TargetPath = $ff.FullName; $lnk2.Save() }

      - name: Setup Tailscale + RDP
        run: |
          $ErrorActionPreference="Stop"
          function Yes($v){ "$v" -match '^(?i:true|1|yes|on)$' }
          function IntOr($v,$d){ if("$v" -match '^\d+$'){ [int]$v } else { [int]$d } }

          $runtime = IntOr("${{ inputs.runtime_minutes }}", 355)
          if (Yes("${{ inputs.quick_test }}")) { $runtime = 5 }
          if (-not (Yes("${{ inputs.quick_test }}")) -and $runtime -lt 6) { $runtime = 355 }
          if ($runtime -gt 360) { $runtime = 355 }
          "RUNTIME_MINUTES=$runtime" | Out-File -Append $env:GITHUB_ENV

          if (Yes("${{ inputs.do_purge }}")) {
            try{
              $auth=[Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("${{ inputs.ts_api_key }}:"))
              $tn=[uri]::EscapeDataString("${{ inputs.ts_tailnet }}")
              $resp=Invoke-RestMethod "https://api.tailscale.com/api/v2/tailnet/$tn/devices" -Headers @{Authorization="Basic $auth"}
              foreach($d in $resp.devices){ if($d.hostname -match '^bullet[0-9]*$'){ Invoke-RestMethod -Method Delete -Uri "https://api.tailscale.com/api/v2/device/$($d.id)" -Headers @{Authorization="Basic $auth"} -ErrorAction SilentlyContinue } }
              Write-Host "Purged existing bullet* devices (if any)."
            } catch { Write-Host "Purge warning: $($_.Exception.Message)" }
          }

          $ts="C:\Program Files\Tailscale\tailscale.exe"
          if(-not(Test-Path $ts)){
            $url="https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe"
            $dst="$env:TEMP\ts-setup.exe"
            Invoke-WebRequest $url -OutFile $dst -UseBasicParsing
            Start-Process $dst -ArgumentList "/quiet" -Wait
          }
          Start-Service Tailscale -ErrorAction SilentlyContinue
          & $ts logout | Out-Null
          & $ts up --authkey "${{ inputs.ts_authkey }}" --hostname "$env:TS_HOSTNAME" --accept-routes --accept-dns=false
          $ip=& $ts ip -4 | Select-Object -First 1

          $u=$env:RDP_USER; $p=$env:RDP_PASS
          $sec=ConvertTo-SecureString $p -AsPlainText -Force
          if(-not(Get-LocalUser -Name $u -EA SilentlyContinue)){
            New-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Add-LocalGroupMember Administrators $u
            Add-LocalGroupMember "Remote Desktop Users" $u
          } else {
            Set-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Enable-LocalUser -Name $u
          }
          Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" fDenyTSConnections 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null

          Write-Host "RDP ready → user=$u pass=$p ip=$ip dns=$env:TS_HOSTNAME"

      - name: Launch portable apps instantly (if present)
        run: |
          if (Test-Path "C:\Tools") {
            $rust = Get-ChildItem -Path "C:\Tools" -Recurse -Filter "rustdesk*.exe" | Sort-Object Length -Descending | Select-Object -First 1
            if ($rust) { Start-Process $rust.FullName }
            $ff = Get-ChildItem -Path "C:\Tools" -Recurse -Filter "firefox.exe" | Where-Object { $_.FullName -match 'FirefoxNightly' } | Select-Object -First 1
            if ($ff) { Start-Process $ff.FullName -ArgumentList "about:blank" }
            Write-Host "Portable tools launched (if found)."
          }

      - name: Optional background install (Brave/Vivaldi/Avica) from ZIP
        if: ${{ inputs.install_heavy_browsers == 'true' }}
        continue-on-error: true
        run: |
          if (Test-Path "C:\Tools") {
            $jobs=@()
            $brave   = Get-ChildItem -Path "C:\Tools" -Recurse -Include "*brave*.exe"   | Select-Object -First 1
            $vivaldi = Get-ChildItem -Path "C:\Tools" -Recurse -Include "*vivaldi*.exe" | Select-Object -First 1
            $avica   = Get-ChildItem -Path "C:\Tools" -Recurse -Include "*avica*.exe"   | Select-Object -First 1
            if ($brave)   { $jobs += Start-Job { Start-Process $using:brave.FullName   -Args "/silent /install" -Wait } }
            if ($vivaldi) { $jobs += Start-Job { Start-Process $using:vivaldi.FullName -Args "/silent /install" -Wait } }
            if ($avica)   { $jobs += Start-Job { Start-Process $using:avica.FullName   -Args "/quiet" -Wait } }
            if ($jobs.Count -gt 0) { Receive-Job -Job $jobs -Wait -AutoRemoveJob | Out-Null }
            Write-Host "Background installs finished (non-blocking)."
          }

      - name: Keep alive
        run: |
          $end=(Get-Date).AddMinutes([int]$env:RUNTIME_MINUTES)
          while((Get-Date) -lt $end){ Start-Sleep -Seconds 60 }

      - name: Dispatch next or stop
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          $cycles = [int]"${{ inputs.cycles }}"
          if ($cycles -gt 0) {
            $next = $cycles - 1
            if ($next -le 0) {
              $url = "https://api.github.com/repos/${{ github.repository }}/actions/workflows/rdp-tailscale-stop.yml/dispatches"
              $hdr = @{ Authorization = "Bearer $env:GH_TOKEN"; Accept = "application/vnd.github+json" }
              $payload = @{ ts_tailnet = "${{ inputs.ts_tailnet }}"; ts_api_key = "${{ inputs.ts_api_key }}"; base_prefix = "bullet"; max_count = "10"; dry_run = "false" }
              $body = @{ ref = "${{ github.ref_name }}"; inputs = $payload } | ConvertTo-Json -Depth 20
              Invoke-WebRequest -Method POST -Uri $url -Headers $hdr -Body $body | Out-Null
            } else {
              $payload = @{
                ts_tailnet              = "${{ inputs.ts_tailnet }}"
                ts_api_key              = "${{ inputs.ts_api_key }}"
                ts_authkey              = "${{ inputs.ts_authkey }}"
                tools_zip_url           = "${{ inputs.tools_zip_url }}"
                quick_test              = "${{ inputs.quick_test }}"
                runtime_minutes         = "${{ inputs.runtime_minutes }}"
                do_purge                = "${{ inputs.do_purge }}"
                cycles                  = "$next"
                rdp_count               = "${{ inputs.rdp_count }}"
                install_heavy_browsers  = "${{ inputs.install_heavy_browsers }}"
              }
              $url2 = "https://api.github.com/repos/${{ github.repository }}/actions/workflows/rdp-tailscale-B.yml/dispatches"
              $hdr2 = @{ Authorization = "Bearer $env:GH_TOKEN"; Accept = "application/vnd.github+json" }
              $body2 = @{ ref = "${{ github.ref_name }}"; inputs = $payload } | ConvertTo-Json -Depth 20
              Invoke-WebRequest -Method POST -Uri $url2 -Headers $hdr2 -Body $body2 | Out-Null
            }
          } else {
            Write-Host "No cycles configured. Done."
          }
