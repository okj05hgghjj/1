name: RDP via Tailscale + RustDesk (Workflow A)

on:
  workflow_dispatch:
    inputs:
      ts_tailnet:
        description: "Tailscale tailnet (example: you@gmail.com)"
        required: true
      ts_api_key:
        description: "Tailscale API key (device admin, no 'Bearer')"
        required: true
      ts_authkey:
        description: "Tailscale Auth key (reusable or ephemeral)"
        required: true
      runtime_minutes:
        description: "Runtime (max 355)"
        required: false
        default: "355"
      test_mode:
        description: "Run only 5 minutes (for testing)"
        type: boolean
        default: false

jobs:
  rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
    - name: Setup hostname
      id: setup
      shell: pwsh
      run: |
        $runtime = [int]("${{ github.event.inputs.runtime_minutes }}")
        if ("${{ github.event.inputs.test_mode }}" -eq "true") { $runtime = 5 }
        echo "RUNTIME=$runtime" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "HOSTNAME=bullet" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "USER=Bullettemporary" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "PASS=Bullet@12345" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Setup Tailscale + RDP
      shell: pwsh
      run: |
        $ErrorActionPreference="Stop"
        Write-Host "Runtime (minutes): $env:RUNTIME"
        Write-Host "Setting up Tailscale..."
        iwr https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe -OutFile tailscale.exe
        Start-Process tailscale.exe -ArgumentList "/install /quiet" -Wait
        Start-Process "C:\Program Files\Tailscale\tailscale.exe" -ArgumentList "up --authkey ${{ github.event.inputs.ts_authkey }} --hostname $env:HOSTNAME --accept-dns=false" -Wait
        Write-Host "Tailscale connected."

        Write-Host "Enabling RDP..."
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        net user $env:USER $env:PASS /add
        net localgroup administrators $env:USER /add
        Write-Host "RDP ready at hostname $env:HOSTNAME"

    - name: Install RustDesk (winget + fallback)
      shell: pwsh
      run: |
        $ErrorActionPreference="SilentlyContinue"
        Write-Host "Trying winget install for RustDesk..."
        winget install --id=RustDesk.RustDesk -e --silent --accept-source-agreements --accept-package-agreements
        if (-not (Get-Command rustdesk -ErrorAction SilentlyContinue)) {
          Write-Host "Winget failed, fallback to GitHub EXE..."
          $url="https://github.com/rustdesk/rustdesk/releases/download/1.2.3/rustdesk-1.2.3-x86_64.exe"
          $exe="$env:TEMP\rustdesk.exe"
          Invoke-WebRequest $url -OutFile $exe -UseBasicParsing
          Start-Process $exe -ArgumentList "/VERYSILENT /NORESTART" -Wait
        }
        Write-Host "RustDesk installed."

    - name: Launch RustDesk
      shell: pwsh
      run: |
        $rd = Get-ChildItem "C:\Program Files" -Recurse -Filter "rustdesk.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
        if(-not $rd){ $rd = Get-ChildItem "C:\Program Files (x86)" -Recurse -Filter "rustdesk.exe" -ErrorAction SilentlyContinue | Select-Object -First 1 }
        if($rd){
          Write-Host "Launching RustDesk: $($rd.FullName)"
          Start-Process $rd.FullName
          Start-Sleep -Seconds 15
        } else {
          Write-Error "RustDesk not found after install"
        }

    - name: Take full-screen screenshot (RustDesk visible)
      shell: pwsh
      run: |
        Add-Type -AssemblyName System.Windows.Forms
        Add-Type -AssemblyName System.Drawing
        $bmp = New-Object Drawing.Bitmap([System.Windows.Forms.Screen]::PrimaryScreen.Bounds.Width,
                                         [System.Windows.Forms.Screen]::PrimaryScreen.Bounds.Height)
        $graphics = [Drawing.Graphics]::FromImage($bmp)
        $graphics.CopyFromScreen([System.Drawing.Point]::Empty,[System.Drawing.Point]::Empty,$bmp.Size)
        $file = "$env:GITHUB_WORKSPACE\rustdesk-screen.png"
        $bmp.Save($file, [System.Drawing.Imaging.ImageFormat]::Png)
        Write-Host "Saved screenshot to $file"

    - name: Upload screenshot artifact
      uses: actions/upload-artifact@v4
      with:
        name: rustdesk-screenshot
        path: rustdesk-screen.png

    - name: Keep alive
      shell: pwsh
      run: |
        Write-Host "Keeping session alive for $env:RUNTIME minutes..."
        Start-Sleep -Seconds ($env:RUNTIME * 60)
