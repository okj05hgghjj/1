name: "RDP via Tailscale + RustDesk (Workflow A)"

on:
  workflow_dispatch:
    inputs:
      ts_tailnet:        { description: "Tailscale tailnet (e.g. you@gmail.com)", required: true }
      ts_api_key:        { description: "Tailscale API key (device admin, no 'Bearer')", required: true }
      ts_authkey:        { description: "Tailscale Auth key (reusable or ephemeral)", required: true }
      quick_test:
        description: "Run 5-minute quick test"
        type: boolean
        default: false
      runtime_minutes:   { description: "Runtime (max 360; default 355; ignored if quick_test=true)", required: false, default: "355" }
      do_purge:          { description: "Purge bullet* at start", required: false, default: "true" }
      multi_rdp:
        description: "Enable multiple RDPs"
        required: false
        default: false
        type: boolean
      multi_count:
        description: "Number of RDPs (1–10)"
        required: false
        default: "1"

permissions:
  contents: read
  actions: write

defaults:
  run:
    shell: pwsh

jobs:
  rdp:
    runs-on: windows-2025
    timeout-minutes: 370

    steps:
      - name: Decide hostname
        run: |
          if ("${{ inputs.multi_rdp }}" -eq "true") {
            $env:TS_HOSTNAME = "bullet1"
          } else {
            $env:TS_HOSTNAME = "bullet"
          }
          "TS_HOSTNAME=$env:TS_HOSTNAME" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Setup Tailscale + RDP
        run: |
          $ErrorActionPreference = "Stop"

          # Runtime
          $runtime = [int]"${{ inputs.runtime_minutes }}"
          if ("${{ inputs.quick_test }}" -eq "true") { $runtime = 5 }
          if ($runtime -gt 360) { $runtime = 355 }
          "RUNTIME_MINUTES=$runtime" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Runtime: $runtime minutes"

          # Install Tailscale
          $tsExe = "C:\Program Files\Tailscale\tailscale.exe"
          if (-not (Test-Path $tsExe)) {
            $url = "https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe"
            $dst = "$env:TEMP\ts.exe"
            Invoke-WebRequest -Uri $url -OutFile $dst -UseBasicParsing
            Start-Process -FilePath $dst -ArgumentList "/quiet" -Wait
          }
          Start-Service Tailscale -ErrorAction SilentlyContinue
          & $tsExe up --authkey "${{ inputs.ts_authkey }}" --hostname $env:TS_HOSTNAME --accept-routes --accept-dns=false

          # Enable RDP account
          $user="Bullettemporary"; $pass="Bullet@12345"
          $sec = ConvertTo-SecureString $pass -AsPlainText -Force
          if (-not (Get-LocalUser -Name $user -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $user -Password $sec -AccountNeverExpires
            Add-LocalGroupMember -Group Administrators -Member $user
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $user
          }
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name fDenyTSConnections -Value 0

          $ip4 = (& $tsExe ip -4 | Select-Object -First 1)
          Write-Host "RDP login → user=$user pass=$pass ip=$ip4"

      - name: Install RustDesk + Get ID
        run: |
          $msiUrl = "https://github.com/rustdesk/rustdesk/releases/download/1.2.3/rustdesk-1.2.3-x86_64.msi"
          $msi = "$env:TEMP\rustdesk.msi"
          Invoke-WebRequest -Uri $msiUrl -OutFile $msi -UseBasicParsing
          Start-Process msiexec.exe -ArgumentList "/i `"$msi`" /qn" -Wait

          $exe = "C:\Program Files\RustDesk\rustdesk.exe"
          if (-not (Test-Path $exe)) { $exe = "C:\Program Files (x86)\RustDesk\rustdesk.exe" }
          if (-not (Test-Path $exe)) { throw "RustDesk not found" }

          $pwd = (New-Guid).Guid.Substring(0,8)
          try { & $exe --password $pwd } catch {}
          Start-Sleep -Seconds 10

          $id = ""
          if (Test-Path "C:\ProgramData\RustDesk\id") {
            $id = Get-Content "C:\ProgramData\RustDesk\id" | Select-Object -First 1
          }
          if (-not $id) { $id="unknown" }

          "RUSTDESK_ID=$id"   | Out-File -FilePath $env:GITHUB_ENV -Append
          "RUSTDESK_PWD=$pwd" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Show RustDesk ID + Password in logs
        run: |
          Write-Host "RustDesk ID = $env:RUSTDESK_ID"
          Write-Host "RustDesk PASSWORD = $env:RUSTDESK_PWD"

      - name: Screenshot & Upload to GoFile
        run: |
          Add-Type -AssemblyName System.Windows.Forms
          Add-Type -AssemblyName System.Drawing
          $bounds = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds
          $bmp = New-Object System.Drawing.Bitmap $bounds.Width, $bounds.Height
          $gfx = [System.Drawing.Graphics]::FromImage($bmp)
          $gfx.CopyFromScreen($bounds.Location, [System.Drawing.Point]::Empty, $bounds.Size)
          $file = "$env:GITHUB_WORKSPACE\rustdesk-login.png"
          $bmp.Save($file, [System.Drawing.Imaging.ImageFormat]::Png)

          $server = (Invoke-RestMethod https://api.gofile.io/getServer).data.server
          $resp = Invoke-RestMethod -Uri "https://$server.gofile.io/contents/uploadfile" -Method Post -Form @{ "file" = Get-Item $file }
          $link = $resp.data.directLink
          if (-not $link) { $link = $resp.data.downloadPage }
          Write-Host "RustDesk Screenshot GoFile Link: $link"

      - name: Keep alive
        run: |
          $end=(Get-Date).AddMinutes([int]$env:RUNTIME_MINUTES)
          while((Get-Date) -lt $end){ Start-Sleep -Seconds 60 }
