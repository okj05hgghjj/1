name: RDP + Tailscale + RustDesk + (Optional) Chrome Remote Desktop (A)

on:
  workflow_dispatch:
    inputs:
      ts_tailnet:         { description: "Tailscale tailnet (e.g. you@gmail.com)", required: true }
      ts_api_key:         { description: "Tailscale API key (device admin, no Bearer)", required: true }
      ts_authkey:         { description: "Tailscale Auth key (reusable or ephemeral)", required: true }
      quick_test:         { description: "Run 5-minute test", type: boolean, default: false }
      runtime_minutes:    { description: "Per-cycle runtime (<=60). Default 50.", required: false, default: "50" }
      do_purge:           { description: "Purge bullet* devices at start (single instance only)", required: false, default: "true" }
      cycles:             { description: "How many cycles incl this run (0=only this run)", required: false, default: "1" }
      rdp_count:          { description: "How many RDP instances (1-10) [ignored if CRD provided]", required: false, default: "1" }
      crd_code:           { description: "CRD code (4/...), full command, or URL containing --code", required: false, default: "" }
      crd_pin:            { description: "CRD PIN (6â€“12 digits)", required: false, default: "123456" }

permissions:
  contents: read
  actions: write

defaults:
  run:
    shell: pwsh

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mk.outputs.matrix }}
      multi:  ${{ steps.mk.outputs.multi }}
    steps:
      - id: mk
        run: |
          $crd = @'
          ${{ inputs.crd_code }}
          '@.Trim()
          if ($crd.Length -gt 0) { $n = 1 } else {
            $n = [int]"${{ inputs.rdp_count }}"; if ($n -lt 1) { $n = 1 }; if ($n -gt 10) { $n = 10 }
          }
          $inc = @(); for ($i=1; $i -le $n; $i++){ $inc += @{ id = $i } }
          $json = @{ include = $inc } | ConvertTo-Json -Compress
          "matrix=$json" | Out-File $env:GITHUB_OUTPUT -Append -Encoding utf8
          $multi = if ($n -gt 1) { '1' } else { '0' }
          "multi=$multi" | Out-File $env:GITHUB_OUTPUT -Append -Encoding utf8

  rdp:
    needs: setup
    runs-on: windows-latest
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
      max-parallel: 10
    timeout-minutes: 60
    env:
      RDP_USER: Bullettemporary
      RDP_PASS: Bullet@12345

    steps:
      - name: Set CRD flag early
        run: |
          $crd = @'
          ${{ inputs.crd_code }}
          '@.Trim()
          if ($crd.Length -gt 0) { "CRD_ENABLED=1" | Out-File -Append $env:GITHUB_ENV } else { "CRD_ENABLED=0" | Out-File -Append $env:GITHUB_ENV }

      # ... same CRD install + run steps here ...

      - name: Decide hostname + runtime
        run: |
          if ("${{ inputs.rdp_count }}" -gt 1) { $hn = "bullet${{ matrix.id }}" } else { $hn = "bullet" }
          "TS_HOSTNAME=$hn" | Out-File -Append $env:GITHUB_ENV

          function Yes($v){ "$v" -match '^(?i:true|1|yes|on)$' }
          function IntOr($v,$d){
            if ($null -eq $v -or "$v".Trim() -eq "") { return [int]$d }
            if ("$v" -match '^\d+$') { return [int]$v } else { return [int]$d }
          }
          $runtime = IntOr("${{ inputs.runtime_minutes }}",50)
          if (Yes("${{ inputs.quick_test }}")) { $runtime = 5 }
          if ($runtime -gt 60) { $runtime = 60 }
          if ($runtime -lt 5)  { $runtime = 5 }
          "RUNTIME_MINUTES=$runtime" | Out-File -Append $env:GITHUB_ENV
          Write-Host "Hostname: $hn | Runtime: $runtime"

      # ... tailscale, RDP user, python, rustdesk, firewall, screenshot ...

      - name: Keep alive
        run: |
          $mins = [int]"${{ env:RUNTIME_MINUTES }}"
          if ($mins -lt 5) { $mins = 5 }
          $end = (Get-Date).AddMinutes($mins)
          while ((Get-Date) -lt $end) {
            $mode = if ("$env:CRD_ENABLED" -eq '1') { '[CRD+RustDesk/RDP]' } else { '[RustDesk/RDP]' }
            $msg = "$mode Heartbeat " + (Get-Date).ToString("HH:mm:ss") + " ends at " + $end.ToString("HH:mm:ss")
            Write-Host $msg
            Write-Output "::notice::$msg"
            Start-Sleep -Seconds 55
          }

      - name: Dispatch next cycle (A->B) with retries
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          function Dispatch-WithRetry([string]$wf, [object]$payloadJson) {
            $url = "https://api.github.com/repos/${{ github.repository }}/actions/workflows/$wf/dispatches"
            $hdr = @{ Authorization = "Bearer $env:GH_TOKEN"; Accept = "application/vnd.github+json" }
            for ($i=1; $i -le 5; $i++) {
              try {
                $resp = Invoke-WebRequest -Method POST -Uri $url -Headers $hdr -Body $payloadJson -ErrorAction Stop
                if ($resp.StatusCode -in 201,204) { Write-Host "Dispatch to $wf ok"; return $true }
              } catch { Start-Sleep -Seconds (5*$i) }
            }
            return $false
          }
          $cycles = [int]"${{ inputs.cycles }}"
          if ($cycles -le 1) { Write-Host "No further cycles requested"; exit 0 }
          $next = $cycles - 1
          $inputs = @{
            ts_tailnet      = "${{ inputs.ts_tailnet }}"
            ts_api_key      = "${{ inputs.ts_api_key }}"
            ts_authkey      = "${{ inputs.ts_authkey }}"
            quick_test      = "${{ inputs.quick_test }}"
            runtime_minutes = "${{ inputs.runtime_minutes }}"
            do_purge        = "${{ inputs.do_purge }}"
            cycles          = "$next"
            rdp_count       = "${{ inputs.rdp_count }}"
            crd_code        = "${{ inputs.crd_code }}"
            crd_pin         = "${{ inputs.crd_pin }}"
          }
          $body = @{ ref="${{ github.ref_name }}"; inputs=$inputs } | ConvertTo-Json -Depth 20
          $ok = Dispatch-WithRetry "rdp-tailscale-rustdesk-B.yml" $body
          if (-not $ok) { [void](Dispatch-WithRetry "rdp-tailscale-rustdesk-A.yml" $body) }
